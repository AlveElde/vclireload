#!/bin/sh

#TODO: Only update files that have changed?
#TODO: Feature request: vcli --quiet option
#TODO: Feature request: vcli get id option
#TODO: Add prefix to resource names
#TODO: Add support for multiple tags
#TODO: Fail if main VCL is not found
#TODO: Fix request: vcli vg add and update args are different
#TODO: Silence error messages on vg/dep not found
#TODO: Feature request: Fail vg compile if it fails
#TODO: Allow multiple paths in VCL_PATH
#TODO: How to handle login creds?

usage() {
	test $# -eq 1 &&
	printf 'Error: %s.\n\n' "$1"

	cat <<-EOF
	Usage: $SCRIPT -p <VCL path> -f <Main VCL> -t <tags>
	       $SCRIPT -h

	Connect to an API-GW and (re)deploy a set of VCLs from a directory.

	Available options:
	-p           : Path to one or more VCL directories
	-f           : Name of the Main VCL
	-t           : VCL Group tags
	-h           : show this help and exit

	EOF
	exit $#
}

fail() {
	echo "$*\n" >&2
	exit 1
}

awk_id() {
	awk -F ',' 'BEGIN { id = 0 } { if (NR == 2) {id=$1; exit} } END { print id }'
}

vcli_run_quiet() {
	(vcli "$@" 2> /dev/null --csv) | awk_id
}

vcli_run() {
	(vcli "$@" --csv) | awk_id
}

while getopts h:p:f:t: OPT
do
	case $OPT in
	h) usage ;;
	p) VCL_PATH=$OPTARG ;;
	f) MAIN_VCL=$OPTARG ;;
	t) TAGS=$OPTARG ;;
	*) usage "wrong usage" >&2 ;;
	esac
done

test $# -lt 6 && usage "too few arguments" >&2
test $# -gt 6 && usage "too many arguments" >&2

printf 'Reloading Main VCL: "%s", VCL path: "%s", tags: "%s"\n' "$MAIN_VCL" "$VCL_PATH" "$TAGS"

VCLGROUP='vcli-reload'
DEPLOYMENT='vcli-reload_dc'
VCL_LIST=$(ls $VCL_PATH | grep .*\.vcl)

if ! vcli login; then
	fail "Login failed"
fi

### Add/update files ###

for VCL in $VCL_LIST
do
	VCL_ID=$(vcli_run_quiet file ls -f name="$VCL")
	if [ "$VCL_ID" -eq "0" ] ; then
		echo "Adding File $VCL_PATH/$VCL"
		VCL_ID=$(vcli_run file add "$VCL" "$VCL_PATH/$VCL")
	else
		echo "Updating File $VCL_PATH/$VCL"
		VCL_ID=$(vcli_run file update "$VCL_ID" --file="$VCL_PATH/$VCL")
	fi

	if [ "$VCL_ID" -eq "0" ] ; then
		fail "Error, failed to add/update File $VCL_PATH/$VCL"
	else
		echo "Success: File has id $VCL_ID"
	fi

	if [ "$VCL" = "$MAIN_VCL" ] ; then
		MAIN_VCL_ID="$VCL_ID"
	elif [ -z "$INCLUDES_ID" ] ; then
		INCLUDES_ID="$VCL_ID"
	else
		INCLUDES_ID="$INCLUDES_ID,$VCL_ID"
	fi
done

### Add Tags ###

TAGS_ID=$(vcli_run_quiet tags ls -f name="$TAGS")
if [ "$TAGS_ID" -eq "0" ] ; then
	echo "Adding tags $TAGS"
	TAGS_ID=$(vcli_run tags add "$TAGS")
fi

if [ "$TAGS_ID" -eq "0" ] ; then
	fail "Error, failed to add tags $TAGS"
else
	echo "Success: Tags have id $VCL_ID"
fi

### Add/update Deployment ###

DEPLOYMENT_ID=$(vcli_run_quiet file ls -f name="$DEPLOYMENT")
if [ "$DEPLOYMENT_ID" -eq "0" ] ; then
	echo "Adding Deployment $DEPLOYMENT (--tags: $TAGS_ID)"
	DEPLOYMENT_ID=$(vcli_run deployment add "$DEPLOYMENT" --tags "$TAGS_ID")
else
	echo "Updating Deployment $DEPLOYMENT (id: $DEPLOYMENT_ID, --tags: $TAGS_ID)"
	DEPLOYMENT_ID=$(vcli_run deployment update "$DEPLOYMENT_ID" --tags "$TAGS_ID" --yes)
fi

if [ "$DEPLOYMENT_ID" -eq "0" ] ; then
	fail "Error, failed to add/update deployment $DEPLOYMENT"
else
	echo "Success: Deployment has id $DEPLOYMENT_ID"
fi

### Add/update VCL Group ###

VCLGROUP_ID=$(vcli_run_quiet vclgroup ls -f name="$VCLGROUP")
if [ "$VCLGROUP_ID" -eq "0" ] ; then
	echo "Adding VCL Group $VCLGROUP (--dep: $DEPLOYMENT_ID, --vcl: $MAIN_VCL_ID, --inc: $INCLUDES_ID --root)"
	VCLGROUP_ID=$(vcli_run vclgroup add "$VCLGROUP" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" --inc "$INCLUDES_ID" --root)
else
	echo "Updating VCL Group $VCLGROUP (id: $VCLGROUP_ID, d--ep: $DEPLOYMENT_ID, --vcl: $MAIN_VCL_ID, --inc: $INCLUDES_ID --root)"
	VCLGROUP_ID=$(vcli_run vclgroup update "$VCLGROUP_ID" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" --inc "$INCLUDES_ID" --root --yes)
fi

if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to add/update VCL Group"
else
	echo "Success: VCL Group has id $VCLGROUP_ID"
fi

### Compile the VCL group ###

echo "Compiling VCL Group $VCLGROUP (id: $VCLGROUP_ID)"
VCLGROUP_ID=$(vcli_run vclgroup compile "$VCLGROUP_ID")
if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to compile VCL Group"
else
	echo "Success: VCL Group compiled"
fi

### Deploy the VCL Group ##

echo "Deploying VCL Group $VCLGROUP (id: $VCLGROUP_ID)"
VCLGROUP_ID=$(vcli_run vclgroup deploy "$VCLGROUP_ID")
if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to deploy VCL Group"
else
	echo "Success: VCL Group deployed"
fi
