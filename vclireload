#!/bin/sh

#TODO: Only update files that have changed?
#TODO: Feature request: vcli --quiet option
#TODO: Feature request: vcli get id option
#TODO: Add prefix to resource names
#TODO: Add support for multiple tags
#TODO: Fail if main VCL is not found
#TODO: Fix request: vcli vg add and update args are different
#TODO: Silence error messages on vg/dep not found
#TODO: Feature request: Fail vg compile if it fails
#TODO: Allow multiple paths in VCL_PATH


usage() {
	test $# -eq 1 &&
	printf 'Error: %s.\n\n' "$1"

	cat <<-EOF
	Usage: $SCRIPT -p <VCL path> -f <Main VCL> -t <tags>
	       $SCRIPT -h

	Connect to an API-GW and (re)deploy a set of VCLs from a directory.

	Available options:
	-h           : show this help and exit

	EOF
	exit $#
}

fail() {
	echo "Error: $*\n" >&2
	exit 1
}

resource_id() {
	(vcli "$1" ls -f name="$2" --csv 2> /dev/null) | awk -F ',' '{ if (NR == 2) { print $1; exit} }'
}

resource_add() {
	RESOURCE="$1"
	shift
	if vcli "$RESOURCE" add "$@" > /dev/null; then
		printf 'Success: Added %s "%s"\n' "$RESOURCE" "$1"
	else
		fail "Failed to add $RESOURCE \"$1\""
	fi
}

resource_update() {
	RESOURCE="$1"
	shift
	if vcli "$RESOURCE" update "$@" > /dev/null; then
		printf 'Success: Updated %s "%s"\n' "$RESOURCE" "$1"
	else
		fail "Failed to update $RESOURCE \"$1\""
	fi
}

resource_compile() {
	RESOURCE="$1"
	shift
	if vcli "$RESOURCE" compile "$@" > /dev/null; then
		printf 'Success: Compiled %s "%s"\n' "$RESOURCE" "$1"
	else
		fail "Failed to compile $RESOURCE \"$1\""
	fi
}

resource_validate() {
	RESOURCE="$1"
	shift
	if vcli "$RESOURCE" validate "$@" > /dev/null; then
		printf 'Success: Validated %s "%s"\n' "$RESOURCE" "$1"
	else
		fail "Failed to validate $RESOURCE \"$1\""
	fi
}

resource_deploy() {
	RESOURCE="$1"
	shift
	if vcli "$RESOURCE" deploy "$@" > /dev/null; then
		printf 'Success: Deployed %s "%s"\n' "$RESOURCE" "$1"
	else
		fail "Failed to deploy $RESOURCE \"$1\""
	fi
}

while getopts h:p:f:t: OPT
do
	case $OPT in
	h) usage ;;
	p) VCL_PATH=$OPTARG ;;
	f) MAIN_VCL=$OPTARG ;;
	t) TAGS=$OPTARG ;;
	*) usage "wrong usage" >&2 ;;
	esac
done

test $# -lt 6 && usage "too few arguments" >&2
test $# -gt 6 && usage "too many arguments" >&2

printf 'Reloading Main VCL: "%s", VCL path: "%s", tags: "%s"\n' "$MAIN_VCL" "$VCL_PATH" "$TAGS"

VCLGROUP='vcli-reload'
DEPLOYMENT='vcli-reload_dc'
VCL_LIST=$(ls $VCL_PATH | grep .*\.vcl)

if ! vcli login; then
	fail "Login failed"
fi

# Add/update files
for VCL in $VCL_LIST
do
	VCL_ID=$(resource_id file "$VCL")
	if [ -z "$VCL_ID" ] ; then
		printf 'Adding %s\n' "$VCL_PATH/$VCL"
		resource_add file "$VCL" "$VCL_PATH/$VCL"
	else
		resource_update file "$VCL_ID" --file="$VCL_PATH/$VCL"
	fi

	if [ "$VCL" = "$MAIN_VCL" ] ; then
		MAIN_VCL_ID=$(resource_id file "$VCL")
	elif [ -z "$INCLUDES_ID" ] ; then
		INCLUDES_ID=$(resource_id file "$VCL")
	else
		INCLUDES_ID="$INCLUDES_ID,$(resource_id file $VCL)"
	fi
done

printf 'Success: All files up to date\n'

# Add/update tags
TAGS_ID=$(resource_id tags "$TAGS")
if [ -z "$TAGS_ID" ] ; then
	resource_add tags "$TAGS"
fi

printf 'Success: All tags up to date\n'

# Add/update deployment
DEPLOYMENT_ID=$(resource_id deployment "$DEPLOYMENT")
if [ -z "$DEPLOYMENT_ID" ] ; then
	resource_add deployment "$DEPLOYMENT" --tags "$TAGS_ID"
	DEPLOYMENT_ID=$(resource_id deployment "$DEPLOYMENT")
else
	resource_update deployment "$DEPLOYMENT_ID" --tags "$TAGS_ID" --yes
fi

printf 'Success: Deployment up to date\n'

# Add/update VCL Group
VCLGROUP_ID=$(resource_id vclgroup "$VCLGROUP")
if [ -z "$VCLGROUP_ID" ] ; then
	resource_add vclgroup "$VCLGROUP" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" --inc "$INCLUDES_ID" --root
	VCLGROUP_ID=$(resource_id vclgroup "$VCLGROUP")
else
	resource_update vclgroup "$VCLGROUP_ID" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" --inc "$INCLUDES_ID" --root --yes
fi

printf 'Success: VCL Group up to date\n'

# Compile the VCL group
resource_compile vclgroup "$VCLGROUP_ID"

# Deploy the VCL Group
resource_deploy vclgroup "$VCLGROUP_ID"
