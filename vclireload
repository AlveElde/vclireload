#!/bin/bash

#TODO: Feature request: vcli --quiet option
#TODO: Feature request: vcli return id option
#TODO: Add support for routing rules
#TODO: Count the number of agents matching tags and deploy to all with new min
#and max
#TODO: Reduce the number of roundtrips needed (add several domains at once etc...)
#TODO: Add test suite

usage() {
	test $# -eq 1 &&
	printf 'Error: %s.\n\n' "$1"

	cat <<-EOF
	Usage: $SCRIPT [options]
	       $SCRIPT -h

	Connect to Varnish Controller and (re)deploy a VCL Group. This script
	relies on vcli, so please ensure that varnish-controller-cli is
	installed.

	Available options:
	-g           : VCL Group name (Default: vclireload)
	-m           : Main VCL name (Default: main.vcl)
	-t           : Tag(s) (Default: vclireload)
	-d           : Domain(s) (Default: none)
	-p           : VCL directory path(s) (Default: cwd)
	-h           : show this help and exit

	EOF
	exit $#
}

fail() {
	echo "$*\n" >&2
	exit 1
}

awk_id() {
	awk -F ',' 'BEGIN { id = 0 } { if (NR == 2) {id=$1; exit} } END { print id }'
}

jq_find() {
	for ROW_ENCODED in $(echo "$3" | jq -r '.[] | @base64'); do
		ROW_DECODED=$(echo $ROW_ENCODED | base64 --decode)
		if [ $(echo "$ROW_DECODED" | jq -r ".$1") = "$2" ] ; then
			echo $(echo "$ROW_DECODED" | jq -r '.id')
			return 0
		fi
	done

	echo "0"
}

vcli_run() {
	(vcli "$@" --csv) | awk_id
}

vcli_run_json() {
	(vcli "$@" --json)
}

while getopts h:p:m:g:t:d: OPT
do
	case $OPT in
	h) usage ;;
	g) VCLGROUP=$OPTARG ;;
	t) TAG_LIST=$OPTARG ;;
	m) MAIN_VCL=$OPTARG ;;
	p) VCL_PATH_LIST=$OPTARG ;;
	d) DOMAIN_LIST=$OPTARG ;;
	*) usage "wrong usage" >&2 ;;
	esac
done

test -z "$VCLGROUP" && VCLGROUP="vclireload"
test -z "$TAG_LIST" && TAG_LIST="vclireload"
test -z "$MAIN_VCL" && MAIN_VCL="main.vcl"
test -z "$VCL_PATH_LIST" && VCL_PATH_LIST="$PWD"

if [ -z "$DOMAIN_LIST" ] ; then
	echo "Reloading root VCL Group $VCLGROUP (Main VCL: $MAIN_VCL, VCL Paths: $VCL_PATH_LIST, Tags: $TAG_LIST)"
else
	echo "Reloading shared VCL Group $VCLGROUP (Main VCL: $MAIN_VCL, VCL Paths: $VCL_PATH_LIST, Tags: $TAG_LIST, Domains: $DOMAIN_LIST)"
fi

DEPLOYMENT="${VCLGROUP}_dc"

### Find VCL files ###

VCL_PATH_LIST_SPACED=$(echo $VCL_PATH_LIST | sed -r 's/,/ /g')
VCL_LIST=$(find $VCL_PATH_LIST_SPACED -maxdepth 1 -type f -name "*.vcl")
test -z "$VCL_LIST" && fail "No VCLs found at $VCL_PATH_LIST"

### Login to the Controller ###

if ! vcli login; then
	fail "Login failed"
fi

### Add/update files ###

VCL_JSON=$(vcli_run_json file ls)

for VCL in $VCL_LIST
do
	VCL_REALPATH=$(realpath $VCL)
	VCL_BASENAME=$(basename $VCL)
	VCL_ID=$(jq_find "name" "$VCL_BASENAME" "$VCL_JSON")
	if [ "$VCL_ID" -eq "0" ] ; then
		echo "Adding File $VCL_REALPATH"
		VCL_ID=$(vcli_run file add "$VCL_BASENAME" "$VCL_REALPATH")
	else
		echo "Updating File $VCL_REALPATH"
		VCL_ID=$(vcli_run file update "$VCL_ID" --file="$VCL_REALPATH")
	fi

	if [ "$VCL_ID" -eq "0" ] ; then
		fail "Error, failed to add/update File $VCL_BASENAME"
	else
		echo "Success: File $VCL_BASENAME has id $VCL_ID"
	fi

	if [ "$VCL_BASENAME" = "$MAIN_VCL" ] ; then
		MAIN_VCL_ID="$VCL_ID"
	elif [ -z "$INCLUDE_ID_LIST" ] ; then
		INCLUDE_ID_LIST="$VCL_ID"
	else
		INCLUDE_ID_LIST="$INCLUDE_ID_LIST,$VCL_ID"
	fi
done

test -z "$MAIN_VCL_ID" && fail "Main VCL $MAIN_VCL did not match any VCLs in $VCL_PATH_LIST"

### Add Tags ###

TAG_JSON=$(vcli_run_json tag ls)

for TAG in ${TAG_LIST//,/ }
do
	TAG_ID=$(jq_find "name" "$TAG" "$TAG_JSON")
	if [ "$TAG_ID" -eq "0" ] ; then
		echo "Adding tag $TAG"
		TAG_ID=$(vcli_run tags add "$TAG")
	fi

	if [ "$TAG_ID" -eq "0" ] ; then
		fail "Error, failed to add tag $TAG"
	else
		echo "Success: Tag $TAG has id $TAG_ID"
	fi

	if [ -z "$TAG_ID_LIST" ] ; then
		TAG_ID_LIST="$TAG_ID"
	else
		TAG_ID_LIST="$TAG_ID_LIST,$TAG_ID"
	fi
done

### Add Domains ###

DOMAIN_JSON=$(vcli_run_json domains ls)

for DOMAIN in ${DOMAIN_LIST//,/ }
do
	DOMAIN_ID=$(jq_find "fqdn" "$DOMAIN" "$DOMAIN_JSON")
	if [ "$DOMAIN_ID" -eq "0" ] ; then
		echo "Adding domain $DOMAIN"
		DOMAIN_ID=$(vcli_run domains add "$DOMAIN")
	fi

	if [ "$DOMAIN_ID" -eq "0" ] ; then
		fail "Error, failed to add domain $DOMAIN"
	else
		echo "Success: Domain $DOMAIN has id $DOMAIN_ID"
	fi

	if [ -z "$DOMAIN_ID_LIST" ] ; then
		DOMAIN_ID_LIST="$DOMAIN_ID"
	else
		DOMAIN_ID_LIST="$DOMAIN_ID_LIST,$DOMAIN_ID"
	fi
done

### Add/update Deployment ###

DEPLOYMENT_JSON=$(vcli_run_json deployment ls)
DEPLOYMENT_ID=$(jq_find "name" "$DEPLOYMENT" "$DEPLOYMENT_JSON")

if [ "$DEPLOYMENT_ID" -eq "0" ] ; then
	echo "Adding Deployment $DEPLOYMENT (--tags $TAG_ID_LIST)"
	DEPLOYMENT_ID=$(vcli_run deployment add "$DEPLOYMENT" --tags "$TAG_ID_LIST")
else
	echo "Updating Deployment $DEPLOYMENT (id: $DEPLOYMENT_ID --tags $TAG_ID_LIST)"
	DEPLOYMENT_ID=$(vcli_run deployment update "$DEPLOYMENT_ID" --tags "$TAG_ID_LIST" --yes)
fi

if [ "$DEPLOYMENT_ID" -eq "0" ] ; then
	fail "Error, failed to add/update deployment $DEPLOYMENT"
else
	echo "Success: Deployment $DEPLOYMENT has id $DEPLOYMENT_ID"
fi

### Determine include arg ###

if [ -z "$INCLUDE_ID_LIST" ] ; then
	INCLUDE_ID_ARG=""
else
	INCLUDE_ID_ARG="--inc $INCLUDE_ID_LIST"
fi

### Select deployment type ###

if [ -z "$DOMAIN_ID_LIST" ] ; then
	echo "Selecting root deployment type"
	DEPLOYMENT_TYPE_ARG="--root"
else
	echo "Selecting shared deployment type"
	DEPLOYMENT_TYPE_ARG="--dom $DOMAIN_ID_LIST"
fi

### Add/update VCL Group ###

VCLGROUP_JSON=$(vcli_run_json vclgroup ls)
VCLGROUP_ID=$(jq_find "name" "$VCLGROUP" "$VCLGROUP_JSON")

if [ "$VCLGROUP_ID" -eq "0" ] ; then
	echo "Adding VCL Group $VCLGROUP (--dep $DEPLOYMENT_ID --vcl $MAIN_VCL_ID $INCLUDE_ID_ARG $DEPLOYMENT_TYPE_ARG)"
	VCLGROUP_ID=$(vcli_run vclgroup add "$VCLGROUP" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" $INCLUDE_ID_ARG $DEPLOYMENT_TYPE_ARG)
else
	echo "Updating VCL Group $VCLGROUP (id: $VCLGROUP_ID --dep $DEPLOYMENT_ID --vcl $MAIN_VCL_ID $INCLUDE_ID_ARG $DEPLOYMENT_TYPE_ARG)"
	VCLGROUP_ID=$(vcli_run vclgroup update "$VCLGROUP_ID" --dep "$DEPLOYMENT_ID" --vcl "$MAIN_VCL_ID" $INCLUDE_ID_ARG $DEPLOYMENT_TYPE_ARG --yes)
fi

if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to add/update VCL Group $VCLGROUP"
else
	echo "Success: VCL Group $VCLGROUP has id $VCLGROUP_ID"
fi

### Compile the VCL Group ###

echo "Compiling VCL Group $VCLGROUP (id: $VCLGROUP_ID)"
VCLGROUP_ID=$(vcli_run vclgroup compile "$VCLGROUP_ID")
if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to compile VCL Group $VCLGROUP"
else
	echo "Success: VCL Group $VCLGROUP compiled"
fi

### Deploy the VCL Group ##

echo "Deploying VCL Group $VCLGROUP (id: $VCLGROUP_ID)"
VCLGROUP_ID=$(vcli_run vclgroup deploy "$VCLGROUP_ID")
if [ "$VCLGROUP_ID" -eq "0" ] ; then
	fail "Error, failed to deploy VCL Group $VCLGROUP"
else
	echo "Success: VCL Group $VCLGROUP deployed "
fi
